AWSTemplateFormatVersion: 2010-09-09
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ['logs:*']
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action: [ 
                "ssm:GetParameter",              
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameterHistory" ]
                Resource: '*'
              - Effect: Allow
                Action: [ "s3:GetObjectVersionTagging",
                "s3:GetObjectAcl",
                "s3:GetBucketObjectLockConfiguration",
                "s3:GetObjectVersionAcl",
                "s3:HeadBucket",
                "s3:GetBucketPolicyStatus",
                "s3:GetObjectRetention",
                "s3:GetBucketNotification",
                "s3:PutObject",
                "s3:GetObject",
                "s3:ListBucketVersions",
                "s3:ListBucket",
                "s3:GetBucketPolicy",
                "s3:GetObjectTagging",
                "s3:PutBucketVersioning",
                "s3:ListAllMyBuckets",
                "s3:PutObjectRetention",
                "s3:GetBucketLocation",
                "s3:GetAccessPointPolicy",
                "s3:GetObjectVersion"]
                Resource: '*'                 
  ExecuteLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
            import traceback
            import boto3
            import logging
            import os
            import random
            import uuid
            import json

            from base64 import b64decode
            from botocore.exceptions import ClientError          

            logger = logging.getLogger(__name__)
            ssm = boto3.client('ssm')
            s3=boto3.client('s3')

            SUCCESS = "SUCCESS"
            FAILED = "FAILED"
             
            def handler(event, context): 
                try:
                    user_value = ssm.get_parameter(
                        Name='Username',
                        WithDecryption=False
                    )                
                    print(user_value['Parameter']['Value'])
                    response = s3.put_object(
                        Body=user_value['Parameter']['Value'],
                        Bucket='srini95',
                        Key=user_value['Parameter']['Name'],
                    )
                    responseValue = user_value['Parameter']['Value']
                    responseData = {}
                    responseData['Data'] = responseValue
                    send(event, context, SUCCESS, responseData, "Username")                    
                except ClientError as e:
                    logging.error(e)
                    return False
                return "My Lambda is executed Successfully"

            def send(event, context, responseStatus, responseData, physicalResourceId=None, noEcho=False):
                responseUrl = event['ResponseURL']
             
                print(responseUrl)
             
                responseBody = {}
                responseBody['Status'] = responseStatus
                responseBody['Reason'] = 'See the details in CloudWatch Log Stream: ' + context.log_stream_name
                responseBody['PhysicalResourceId'] = physicalResourceId or context.log_stream_name
                responseBody['StackId'] = event['StackId']
                responseBody['RequestId'] = event['RequestId']
                responseBody['LogicalResourceId'] = event['LogicalResourceId']
                responseBody['NoEcho'] = noEcho
                responseBody['Data'] = responseData
             
                json_responseBody = json.dumps(responseBody)
             
                print("Response body:\n" + json_responseBody)
             
                headers = {
                    'content-type' : '',
                    'content-length' : str(len(json_responseBody))
                }
             
                try:
                    response = requests.put(responseUrl,
                                            data=json_responseBody,
                                            headers=headers)
                    print("Status code: " + response.reason)
                except Exception as e:
                    print("send(..) failed executing requests.put(..): " + str(e))                
                
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt LambdaExecutionRole.Arn
  LambdaFunctionPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt ExecuteLambdaFunction.Arn
      Principal: 'cloudformation.amazonaws.com'   
  InvokeLambda:
    Type: AWS::CloudFormation::CustomResource
    Properties:
       ServiceToken: !GetAtt ExecuteLambdaFunction.Arn    
    DependsOn: ExecuteLambdaFunction
    Version: "1.0"